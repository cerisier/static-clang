filegroup(
    name = "libcxx_threads",
    visibility = ["//visibility:public"],
)

cc_library(
    name = "c",
    includes = [
        "libc/include/generic-glibc",
        "libc/include/any-linux-any",
        "libc/include/any-linux-any/linux",
        "libc/include/arm-linux-gnueabi",
    ],
    hdrs = glob([
        "libc/include/generic-glibc/**",
        "libc/include/any-linux-any/**",
        "libc/include/arm-linux-gnueabi/**",
    ]),
    visibility = ["//visibility:public"],
)

cc_library(
    name = "c++",
    defines = [
        "_LIBCPP_HARDENING_MODE=_LIBCPP_HARDENING_MODE_NONE",
        # "_LIBCPP_HAS_NO_THREADS",
        "NDEBUG",
        "_LIBCPP_BUILDING_LIBRARY",
        "_LIBCPP_DISABLE_VISIBILITY_ANNOTATIONS",
        "_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER",
        "_LIBCPP_HAS_NO_VENDOR_AVAILABILITY_ANNOTATIONS",
        "LIBCXX_BUILDING_LIBCXXABI",
        "_LIBCXXABI_DISABLE_VISIBILITY_ANNOTATIONS",
        "_LIBCPP_PSTL_BACKEND_SERIAL",
        "_LIBCPP_ABI_VERSION=1",
        "_LIBCPP_ABI_NAMESPACE=__1",
    ],
    copts = [
        "-nostdinc++",
        "-std=c++23",
        "-Wno-user-defined-literals",
        "-Wno-covered-switch-default",
        "-Wno-suggest-override",

        # "-D_LIBCPP_HARDENING_MODE=_LIBCPP_HARDENING_MODE_NONE",
        # # "-D_LIBCPP_HAS_NO_THREADS",
        # "-DNDEBUG",
        # "-D_LIBCPP_BUILDING_LIBRARY",
        # "-D_LIBCPP_DISABLE_VISIBILITY_ANNOTATIONS",
        # "-D_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER",
        # "-D_LIBCPP_HAS_NO_VENDOR_AVAILABILITY_ANNOTATIONS",
        # "-DLIBCXX_BUILDING_LIBCXXABI",
        # "-D_LIBCXXABI_DISABLE_VISIBILITY_ANNOTATIONS",
        # "-D_LIBCPP_PSTL_BACKEND_SERIAL",
        "-fvisibility=hidden",
        "-fvisibility-inlines-hidden",
        "-faligned-allocation",
        # "-D_LIBCPP_ABI_VERSION=1",
        # "-D_LIBCPP_ABI_NAMESPACE=__1",
    ],
    includes = [
        "libcxx/include",
        "libcxx/src",
        "libcxxabi/include",
        "libcxxabi/src",
    ],
    hdrs = glob(["libcxx/include/**", "libcxxabi/include/**"]),
    textual_hdrs = glob([
        "libcxx/src/**/*.h",
        "libcxx/src/**/*.ipp",
        "libcxxabi/src/**/*.h",
        "libcxxabi/src/**/*.def",
    ]),
    srcs = [
        "libcxx/src/algorithm.cpp",
        "libcxx/src/any.cpp",
        "libcxx/src/bind.cpp",
        "libcxx/src/call_once.cpp",
        "libcxx/src/charconv.cpp",
        "libcxx/src/chrono.cpp",
        "libcxx/src/error_category.cpp",
        "libcxx/src/exception.cpp",
        "libcxx/src/expected.cpp",
        "libcxx/src/filesystem/directory_entry.cpp",
        "libcxx/src/filesystem/directory_iterator.cpp",
        "libcxx/src/filesystem/filesystem_clock.cpp",
        "libcxx/src/filesystem/filesystem_error.cpp",
        # omit int128_builtins.cpp because it provides __muloti4 which is already provided
        # by compiler_rt and crashes on Windows x86_64: https://github.com/ziglang/zig/issues/10719
        # "libcxx/src/filesystem/int128_builtins.cpp",
        "libcxx/src/filesystem/operations.cpp",
        "libcxx/src/filesystem/path.cpp",
        "libcxx/src/fstream.cpp",
        "libcxx/src/functional.cpp",
        "libcxx/src/hash.cpp",
        "libcxx/src/ios.cpp",
        "libcxx/src/ios.instantiations.cpp",
        "libcxx/src/iostream.cpp",
        "libcxx/src/legacy_pointer_safety.cpp",
        "libcxx/src/locale.cpp",
        "libcxx/src/memory.cpp",
        "libcxx/src/memory_resource.cpp",
        "libcxx/src/new.cpp",
        "libcxx/src/new_handler.cpp",
        "libcxx/src/new_helpers.cpp",
        "libcxx/src/optional.cpp",
        "libcxx/src/ostream.cpp",
        "libcxx/src/print.cpp",
        # "libcxx/src/pstl/libdispatch.cpp",
        "libcxx/src/random.cpp",
        "libcxx/src/random_shuffle.cpp",
        "libcxx/src/regex.cpp",
        "libcxx/src/ryu/d2fixed.cpp",
        "libcxx/src/ryu/d2s.cpp",
        "libcxx/src/ryu/f2s.cpp",
        "libcxx/src/stdexcept.cpp",
        "libcxx/src/string.cpp",
        "libcxx/src/strstream.cpp",
        # "libcxx/src/support/ibm/mbsnrtowcs.cpp",
        # "libcxx/src/support/ibm/wcsnrtombs.cpp",
        # "libcxx/src/support/ibm/xlocale_zos.cpp",
        # "libcxx/src/support/win32/locale_win32.cpp",
        # "libcxx/src/support/win32/support.cpp",
        "libcxx/src/system_error.cpp",
        "libcxx/src/typeinfo.cpp",
        "libcxx/src/valarray.cpp",
        "libcxx/src/variant.cpp",
        "libcxx/src/vector.cpp",
        "libcxx/src/verbose_abort.cpp",
    ] + [
        "libcxxabi/src/abort_message.cpp",
        "libcxxabi/src/cxa_aux_runtime.cpp",
        "libcxxabi/src/cxa_default_handlers.cpp",
        "libcxxabi/src/cxa_demangle.cpp",
        "libcxxabi/src/cxa_exception.cpp",
        "libcxxabi/src/cxa_exception_storage.cpp",
        "libcxxabi/src/cxa_guard.cpp",
        "libcxxabi/src/cxa_handlers.cpp",
        # "libcxxabi/src/cxa_noexception.cpp",
        "libcxxabi/src/cxa_personality.cpp",
        "libcxxabi/src/cxa_thread_atexit.cpp",
        "libcxxabi/src/cxa_vector.cpp",
        "libcxxabi/src/cxa_virtual.cpp",
        "libcxxabi/src/fallback_malloc.cpp",
        "libcxxabi/src/private_typeinfo.cpp",
        "libcxxabi/src/stdlib_exception.cpp",
        "libcxxabi/src/stdlib_new_delete.cpp",
        "libcxxabi/src/stdlib_stdexcept.cpp",
        "libcxxabi/src/stdlib_typeinfo.cpp",
    ],
    deps = [":c"],
    visibility = ["//visibility:public"],
)
