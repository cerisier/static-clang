diff --git a/utils/bazel/llvm-project-overlay/libunwind/BUILD.bazel b/utils/bazel/llvm-project-overlay/libunwind/BUILD.bazel
index f8448fb0e726..28a59927ac80 100644
--- a/utils/bazel/llvm-project-overlay/libunwind/BUILD.bazel
+++ b/utils/bazel/llvm-project-overlay/libunwind/BUILD.bazel
@@ -8,6 +8,50 @@ package(
 
 licenses(["notice"])
 
+cc_library(
+    name = "unwind",
+    srcs = [
+        "src/libunwind.cpp",
+        "src/Unwind-EHABI.cpp",
+        "src/Unwind-seh.cpp",
+	#"src/UnwindLevel1.c",
+	#"src/UnwindLevel1-gcc-ext.c",
+        "src/Unwind-sjlj.c",
+        "src/Unwind-wasm.c",
+        "src/AddressSpace.hpp",
+        "src/assembly.h",
+	"src/CompactUnwinder.hpp",
+        "src/cet_unwind.h",
+        "src/config.h",
+        "src/dwarf2.h",
+        "src/DwarfInstructions.hpp",
+        "src/DwarfParser.hpp",
+        "src/EHHeaderParser.hpp",
+        "src/FrameHeaderCache.hpp",
+        "src/libunwind_ext.h",
+        "src/Registers.hpp",
+        "src/RWMutex.hpp",
+        "src/Unwind-EHABI.h",
+        "src/UnwindCursor.hpp",
+        "src/UnwindRegistersRestore.S",
+        "src/UnwindRegistersSave.S",
+        "include/__libunwind_config.h",
+        "include/libunwind.h",
+        "include/mach-o/compact_unwind_encoding.h",
+        "include/unwind.h",
+        "include/unwind_itanium.h",
+        "include/unwind_arm_ehabi.h",
+    ],
+    includes = ["include"],
+    linkstatic = True,
+)
+
+cc_shared_library(
+    name = "libunwind_shared",
+    shared_lib_name = "libunwind.so",
+    deps = [":unwind"],
+)
+
 # The ld64 linker and lld-macho use the libunwind headers only for the constant
 # definitions, in order to parse and convert DWARF to the compact encoding.
 cc_library(
